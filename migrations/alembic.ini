# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library
# available at: https://pypi.python.org/pypi/python-dateutil
# timezone = UTC

# max length of a migration script filename
# If unspecified, defaults to 32 characters
# truncating the slug and inserting the
# revision numerals in the filename.
# filename_length = 32

# version locations; these are the directories that migrations
# can be found in. This is determined by the "script_location"
# directive, or can be overridden on a per-command basis
# within the command line. If this directive is present in the
# alembic.ini file, it is interpreted as a newline-delimited list
# of directories.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/foo

# default path to the .ini file that Alembic will use
# if none is provided in the command line - this is the
# ini file that all Alembic commands will refer to
# ini_file = alembic.ini

# path to config file
# config = alembic.ini

# the name of the database connection name to be used for running
# migrations. By default, the connection is named "alembic". If
# additional names are specified here, alembic will run the migrations
# against those additional database connections.
# Optional: use % for interpolation within the name.
# eg.  connection_names = alembic,myconnection
# connection_names = alembic

# the sqlalchemy.url value is used to determine the database
# connection string.  This value is typically updated by your
# application at runtime when using alembic within the context of
# an application that creates its own engine using configuration
# from environment variables, a file, etc.  This value can also be
# set here for easier developer usage and startup of alembic within
# a standalone environment.  A typical value is:
sqlalchemy.url = sqlite:///C:\Users\dutta\Codes\IITM-MAD-2\app\database.db

[post_write_hooks]
# post_write_hooks defines hooks that can be implemented on the generated
# migration script file.  Each post_write_hooks entry consists of a "name"
# which is the name of the hook as invoked from the command line, and then
# an optional list of argument files.
#
# e.g. post_write_hooks = black, myformatter
# hook.name=black
# hook.black.arguments=.
#
# If the post_write_hooks section exists, alembic will look for a plugin
# entry point named "alembic.post_write_hooks.<name>" and pass the file
# to be processed.  For more on plugin hook entry points, see the docs at
# https://alembic.sqlalchemy.org/en/latest/api/plugin.html

# e.g. black
# myformatter

[logging]
# If fileConfig is used, these are typical configurations
# for the logging.
keys = root, sqlalchemy, alembic

# loggers; these are typical configurations for the logging.
# loggers = root, sqlalchemy, alembic

# If handlers are configured as fileConfig handlers, these
# are typical configurations for the logging.
# handlers = console, file

# If formatters are configured as fileConfig formatters, these
# are typical configurations for the logging.
# formatters = generic

[loggers]
keys = root, sqlalchemy, alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname = root

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
